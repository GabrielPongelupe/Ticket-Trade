package controller;



import org.springframework.stereotype.Controller;


@Controller

public class PageController {
    
@RequestMapping("/cadastro");
@ResponseBody

    public ModelAndView cadastro(){
        ModelAndView  modelAndView = new ModelAndView();
        modelAndView.setViewName("cadastro.html");
        return modelAndView;

    }

}


package controller;



import org.springframework.stereotype.Controller;


@Controller

public class PageController {
    
@RequestMapping("/login");
@ResponseBody

    public ModelAndView login(){
        ModelAndView  modelAndView = new ModelAndView();
        modelAndView.setViewName("login.html");
        return modelAndView;

    }

}








const express = require('express');
const mysql = require('mysql');
const app = express();
app.use(express.json());

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'usuario',
  password: 'senha',
  database: 'banco_de_dados',
});

connection.connect((err) => {
  if (err) throw err;
  console.log('Conectado ao MySQL!');
});

// cadastrar um usuário
app.post('/cadastrar', (req, res) => {
    const nome = req.body.name;
    const email = req.body.email;
    const cpf = req.body.cpf;
    const dataNascimento = req.body.datanasc;
    const chavePix = req.body.pix;
    const senha = req.body.password;
    const rating = 0; //  valor inicial  rating = 0

  const query = 'INSERT INTO USUARIO (CPF, DATA_DE_NASCIMENTO, EMAIL, CHAVE_PIX, NOME, RATING, SENHA) VALUES (?, ?, ?, ?, ?, ?, ?)';
  connection.query(query, [cpf, dataNascimento, email, chavePix, nome, rating, senha], (error, results, fields) => {
    if (error) throw error;
    res.send('Usuário cadastrado com sucesso');
  });
});

// obter informações de um usuário específico por ID
app.get('/usuario/:id', (req, res) => {
  const usuarioId = req.params.id;
  connection.query('SELECT * FROM USUARIO WHERE USUARIO_ID = ?', usuarioId, (error, results, fields) => {
    if (error) throw error;
    res.send(results);
  });
});

// atualizar as informações de um usuário específico por ID
app.put('/atualizar/:id', (req, res) => {
  const usuarioId = req.params.id;
  const { cpf, dataNascimento, email, chavePix, nome, rating, senha } = req.body; // mudar caso necessario

  const query = 'UPDATE USUARIO SET CPF = ?, DATA_DE_NASCIMENTO = ?, EMAIL = ?, CHAVE_PIX = ?, NOME = ?, RATING = ?, SENHA = ? WHERE USUARIO_ID = ?';
  connection.query(query, [cpf, dataNascimento, email, chavePix, nome, rating, senha, usuarioId], (error, results, fields) => {
    if (error) throw error;
    res.send('Usuário atualizado com sucesso');
  });
});

// excluir um usuário específico por ID
app.delete('/excluir/:id', (req, res) => {
  const usuarioId = req.params.id;
  connection.query('DELETE FROM USUARIO WHERE USUARIO_ID = ?', usuarioId, (error, results, fields) => {
    if (error) throw error;
    res.send('Usuário excluído com sucesso');
  });
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});


